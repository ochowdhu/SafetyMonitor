In this section, we introduce our safety specification logic for autonomous vehicles, which we call 
\planguage (short for, \emph{autonomous vehicle safety specification language}). \planguage is a 
fragment of \emph{propositional metric temporal logic} (MTL)~\cite{MTL}. The syntax of \planguage is given 
below. 

\(
\begin{array}{ccc}
\policy & ::=  & \true \mid p \mid \neg \policy \mid \policy_1\vee \policy_2\mid
\policy_1\since_{\interval}\policy_2 \mid \policy_1\until_{\interval}\policy_2\mid\yesterday_{\interval}\policy\mid \tomorrow_{\interval}\policy
\end{array}
\)

We denoted policies written in \planguage with \policy, $\phi$, and $\psi$ (possibly with subscripts). 
We assume we are given a finite set of propositions, denoted by \cP, which can be used to write policies. 
Each proposition $p\in\cP$ is a formula of \planguage. We have logical connectives ($\neg, \vee$) and 
also have past ($\since, \yesterday$) and future ($\until, \tomorrow$) temporal operators. Each temporal 
operator has an interval (denoted, \interval) associated with it in which the formula is evaluated. The 
interval has the form $[lo, hi]$ where $lo, hi\in\mathbb{N}$ and $lo\leq hi$. 
The interval imposes an additional time interval constraint in which the immediate sub-formula must be true. 
For instance, $\policy_1\since_{[lo, hi]}\policy_2$ is 
true represents that $\policy_2$ was true within $lo$ to $hi$ time of the current time in the past and 
after that point on, $\policy_1$ has been true. For past temporal operators, we allow the high end point 
of \interval to be $\infty$. However, we require our \policy to be \emph{future bounded}, \ie, the high 
end point of \interval associated with all future temporal operators to be finite and bounded. This restriction 
is necessary for the termination of our monitoring algorithm as will be made clear later. 

\Paragraph{Derived Operators. }In our syntax, we present a minimal set of logical connectives and temporal operators. 
Other logical connectives and temporal operators can be derived using the following equivalences. (Logical false) $\false\equiv \neg \true$ . 
(Conjunction) $\policy_1\wedge\policy_2\equiv\neg(\neg\policy_1\vee\neg\policy_2)$. 
(Logical implication) $\policy_1\rightarrow\policy_2\equiv \neg\policy_1\vee\policy_2$. 
(Logical equivalence) $\policy_1\leftrightarrow\policy_2\equiv (\policy_1\rightarrow\policy_2)\wedge(\policy_2\rightarrow\policy_1)$. 
(Past temporal operator ``once'') $\once_{\interval}\policy\equiv (\true\since_{\interval}\policy)$. 
(Past temporal operator ``historically'') $\historically_{\interval}\policy\equiv \neg\once_{\interval}\neg\policy$. 
(Future temporal operator ``eventually'') $\eventually_{\interval}\policy\equiv (\true\until_{\interval}\policy)$. 
(Future temporal operator ``henceforth'') $\henceforth_{\interval}\policy\equiv \neg\eventually_{\interval}\neg\policy$. 

\Paragraph{Semantics. }\planguage formulas are interpreted over time-stamped \emph{traces}. A trace $\sigma$ is a 
sequence of states, each of which maps all propositions in \cP, to either \true or \false. We denote the $i^{th}$ position 
of the trace with $\sigma_i$ where $i\in\mathbb{N}$. Moreover, each $\sigma_i$ has an associated time stamp denoted by 
$\tau_i$ where $\tau_i\in\mathbb{N}$. 
We denote the sequence of time stamps with $\tau$. For all $i, j\in\mathbb{N}$ such that $i < j$, we require 
$\tau_i < \tau_j$. For a given trace $\sigma$ and time stamp sequence $\tau$, we write $\sigma, \tau, i\models\policy$ 
to denote that the formula \policy is true with respect to the $i^{th}$ position of $\sigma$ and $\tau$. We define 
$\sigma, \tau, i\models\policy$  inductively in the following way. 
\begin{itemize}
 \item $\sigma, \tau, i\models\true$
 \item $\sigma, \tau, i\models p$ if and only if $\sigma_i(p) = \true$. 
 \item $\sigma, \tau, i\models\neg\policy$ if and only if $\sigma, \tau, i \not\models\policy$. 
 \item $\sigma, \tau, i\models\policy_1\vee\policy_2$ if and only if $\sigma, \tau, i\models\policy_1$ or $\sigma, \tau, i\models\policy_2$. 
 \item 
\end{itemize}
